import os
import tempfile
from pymongo import MongoClient
from pyrogram import Client, filters
from pyrogram.types import Message, Chat, InlineKeyboardMarkup, InlineKeyboardButton

# MongoDB Setup
MONGO_URI = os.getenv("MONGO_URI", "mongodb+srv://username:password@cluster.mongodb.net/db")
mongo_client = MongoClient(MONGO_URI)
db = mongo_client.mediainfo_bot

banned_users = db.banned_users
banned_channels = db.banned_channels
active_channels = db.active_channels

LOG_CHANNEL = -1001234567890  # Replace with your log channel ID
OWNER_ID = 123456789  # Replace with your Telegram user ID

# Helper Functions
async def is_user_banned(user_id: int) -> bool:
    return await banned_users.find_one({"user_id": user_id}) is not None

async def is_channel_banned(channel_id: int) -> bool:
    return await banned_channels.find_one({"channel_id": channel_id}) is not None

async def ban_user(user_id: int):
    await banned_users.update_one({"user_id": user_id}, {"$set": {"user_id": user_id}}, upsert=True)

async def unban_user(user_id: int):
    await banned_users.delete_one({"user_id": user_id})

async def ban_channel(channel_id: int):
    await banned_channels.update_one({"channel_id": channel_id}, {"$set": {"channel_id": channel_id}}, upsert=True)

async def unban_channel(channel_id: int):
    await banned_channels.delete_one({"channel_id": channel_id})

# Log New Users
@Client.on_message(filters.private & ~filters.service)
async def log_new_user(client, message: Message):
    if not await banned_users.find_one({"user_id": message.from_user.id}):
        await client.send_message(
            LOG_CHANNEL,
            f"#NewUser\nUsername: @{message.from_user.username}\nUser ID: <code>{message.from_user.id}</code>"
        )

# Log New Channels
@Client.on_message(filters.channel & ~filters.service)
async def log_new_channel(client, message: Message):
    chat: Chat = message.chat
    if not await banned_channels.find_one({"channel_id": chat.id}):
        try:
            invite_link = await client.create_chat_invite_link(chat.id)
        except:
            invite_link = "Invite link not available"

        members = await client.get_chat_members_count(chat.id)
        await client.send_message(
            LOG_CHANNEL,
            f"#NewChannel\nTitle: <b>{chat.title}</b>\nID: <code>{chat.id}</code>\nMembers: {members}\nInvite: {invite_link}"
        )

        if message.media:
            await message.forward(LOG_CHANNEL)

        if await is_channel_banned(chat.id):
            await message.reply("This channel is banned from using the bot. Contact the owner to unban.")
            return

# Admin Commands
@Client.on_message(filters.private & filters.user(OWNER_ID) & filters.command("banuser"))
async def handle_ban_user(client, message: Message):
    try:
        user_id = int(message.text.split()[1])
        await ban_user(user_id)
        await message.reply("User banned.")
    except:
        await message.reply("Usage: /banuser <user_id>")

@Client.on_message(filters.private & filters.user(OWNER_ID) & filters.command("unbanuser"))
async def handle_unban_user(client, message: Message):
    try:
        user_id = int(message.text.split()[1])
        await unban_user(user_id)
        await message.reply("User unbanned.")
    except:
        await message.reply("Usage: /unbanuser <user_id>")

@Client.on_message(filters.private & filters.user(OWNER_ID) & filters.command("banchannel"))
async def handle_ban_channel(client, message: Message):
    try:
        channel_id = int(message.text.split()[1])
        await ban_channel(channel_id)
        await message.reply("Channel banned.")
    except:
        await message.reply("Usage: /banchannel <channel_id>")

@Client.on_message(filters.private & filters.user(OWNER_ID) & filters.command("unbanchannel"))
async def handle_unban_channel(client, message: Message):
    try:
        channel_id = int(message.text.split()[1])
        await unban_channel(channel_id)
        await message.reply("Channel unbanned.")
    except:
        await message.reply("Usage: /unbanchannel <channel_id>")

# Enable/Disable MediaInfo
@Client.on_message(filters.command("mediainfo_on") & filters.channel)
async def enable_mediainfo(client, message: Message):
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        return await message.reply_text("❌ Only human admins can use this command.")

    member = await client.get_chat_member(message.chat.id, user_id)
    if member.status not in ("administrator", "creator"):
        return await message.reply_text("❌ Only admins can enable MediaInfo.")

    active_channels.update_one({"_id": message.chat.id}, {"$set": {"enabled": True}}, upsert=True)
    await message.reply_text("✅ MediaInfo has been enabled for this channel.")

@Client.on_message(filters.command("mediainfo_off") & filters.channel)
async def disable_mediainfo(client, message: Message):
    user_id = message.from_user.id if message.from_user else None
    if not user_id:
        return await message.reply_text("❌ Only human admins can use this command.")

    member = await client.get_chat_member(message.chat.id, user_id)
    if member.status not in ("administrator", "creator"):
        return await message.reply_text("❌ Only admins can disable MediaInfo.")

    active_channels.update_one({"_id": message.chat.id}, {"$set": {"enabled": False}}, upsert=True)
    await message.reply_text("🚫 MediaInfo has been disabled for this channel.")

# Handle media posts (requires get_media_from_message, stream_media, get_mediainfo, parse_mediainfo, create_telegraph_page)
@Client.on_message(filters.channel & (filters.video | filters.document | filters.audio))
async def on_channel_media(client: Client, message: Message):
    channel_status = active_channels.find_one({"_id": message.chat.id})
    if not channel_status or not channel_status.get("enabled"):
        return

    media = get_media_from_message(message)
    if not media:
        return

    file_name = getattr(media, 'file_name', 'Unknown')
    file_size = getattr(media, 'file_size', 0)

    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_path = temp_file.name

    try:
        downloaded_path = await stream_media(message, temp_path)
        if not downloaded_path:
            return

        mediainfo_output = await get_mediainfo(downloaded_path)
        html_content = parse_mediainfo(mediainfo_output, file_name, file_size)

        telegraph_url = await create_telegraph_page(
            title=f"{file_name} - Media Info",
            content=html_content
        )

        if telegraph_url:
            button = InlineKeyboardMarkup([
                [InlineKeyboardButton("📋 View Media Info", url=telegraph_url)]
            ])
            await client.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=message.id,
                reply_markup=button
            )
    finally:
        try:
            os.unlink(temp_path)
        except Exception as e:
            print(f"Error deleting temp file: {e}")
    
